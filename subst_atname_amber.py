# changes atom names from standard ROSETTA-PDB to AMBER naming
# So structures are compatible with nucleicacidtools code by mgethers, for placing modified nucleotides onto structure.  

# usage: 
#   python subst_atname_amber.py tomodify.pdb newfile.pdb


import os, sys, pandas as pd

#; 5' (XXF), 3' (XXT), non-terminal (XX), and monomer (XXN) nuc's
# RA5-5' RA-nonterminal RA3-3' RAN-nucleotide
dict_amber_atoms ={"RCN":{"H5T":    "HO",
   "O5'":    "OH",
   "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
   "C4'":    "CT",
   "H4'":    "H1",
   "O4'":    "OS",
   "C1'":    "CT",
   "H1'":    "H2",
   "N1":    "N*",
   "C6":    "C4",
   "H6":    "H4",
   "C5":    "C4",
   "H5":    "HA",
   "C4":    "CA",
   "N4":    "N2",
   "H41":    "H",
   "H42":    "H",
   "N3":    "NC",
   "C2":    "C",
   "O2":    "O",
   "C3'":    "CT",
   "H3'":    "H1",
   "C2'":    "CT",
  "H2'1":   "H1",
   "O2'":    "OH",
  "HO'2":    "HO", 
   "O3'":    "OH",
   "H3T":    "HO",
},
"RC3":{  "P":    "P",
   "O1P":    "O2",
   "O2P":    "O2",
   "O5'":    "OS",
   "C5'":    "CI",
  "H5'1":    "H1", 
  "H5'2":    "H1",
   "C4'":    "CT",
   "H4'":    "H1",
   "O4'":    "OS",
   "C1'":    "CT",
   "H1'":    "H2",
   "N1":    "N*",
   "C6":    "C4",
   "H6":    "H4",
   "C5":    "C4",
   "H5":    "HA",
   "C4":    "CA",
   "N4":    "N2",
   "H41":    "H",
   "H42":    "H",
   "N3":    "NC",
   "C2":    "C",
   "O2":    "O",
   "C3'":    "CT",
   "H3'":    "H1",
   "C2'":    "CT",
  "H2'1":    "H1",
   "O2'":    "OH",
  "HO'2":    "HO",
   "O3'":    "OH",
   "H3T":   "HO",
},
"RC":{  "P":    "P",
   "O1P":    "O2",
   "O2P":    "O2",
   "O5'":    "OS",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N1":    "N*",
  "C6":    "C4",
  "H6":    "H4",
  "C5":    "C4",
  "H5":    "HA",
  "C4":    "CA",
  "N4":    "N2",
  "H41":    "H",
  "H42":    "H",
  "N3":    "NC",
  "C2":    "C",
  "O2":    "O",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
   "O3'":    "OS",
},
 "RC5":{"H5T":    "HO",
  "O5'":    "OH",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N1":    "N*",
  "C6":    "C4",
  "H6":    "H4",
  "C5":    "C4",
  "H5":    "HA",
  "C4":    "CA",
  "N4":    "N2",
  "H41":    "H",
  "H42":    "H",
  "N3":    "NC",
  "C2":    "C",
  "O2":    "O",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OS",
},
 "RGN":{"H5T":    "HO",
  "O5'":    "OH",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N9":    "N*",
  "C8":    "CP",
  "H8":    "H5",
  "N7":    "NB",
  "C5":    "CB",
  "C6":    "C",
  "O6":    "O",
  "N1":    "NA",
  "H1":    "H",
  "C2":    "CA",
  "N2":    "N2",
  "H21":    "H",
  "H22":    "H",
  "N3":    "NC",
  "C4":    "CB",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OH",
  "H3T":    "HO",
 },
"RG3": {  "P":    "P",
   "O1P":    "O2",
   "O2P":    "O2",
   "O5'":    "OS",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N9":    "N*",
  "C8":    "CP",
  "H8":    "H5",
  "N7":    "NB",
  "C5":    "CB",
  "C6":    "C",
  "O6":    "O",
  "N1":    "NA",
  "H1":    "H",
  "C2":    "CA",
  "N2":    "N2",
  "H21":    "H",
  "H22":    "H",
  "N3":    "NC",
  "C4":    "CB",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OH",
  "H3T":    "HO",
},
"RG": {  "P":    "P",
   "O1P":    "O2",
   "O2P":    "O2",
   "O5'":    "OS",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N9":    "N*",
  "C8":    "CP",
  "H8":    "H5",
  "N7":    "NB",
  "C5":    "CB",
  "C6":    "C",
  "O6":    "O",
  "N1":    "NA",
  "H1":    "H",
  "C2":    "CA",
  "N2":    "N2",
  "H21":    "H",
  "H22":    "H",
  "N3":    "NC",
  "C4":    "CB",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OS",
},
"RG5": {"H5T":    "HO",
  "O5'":    "OH", 
  "C5'":    "CI", 
  "H5'1":    "H1", 
  "H5'2":    "H1", 
  "C4'":    "CT", 
  "H4'":    "H1", 
  "O4'":    "OS", 
  "C1'":    "CT", 
  "H1'":    "H2", 
  "N9":    "N*", 
  "C8":    "CP", 
  "H8":    "H5", 
  "N7":    "NB", 
  "C5":    "CB", 
  "C6":    "C", 
  "O6":    "O", 
  "N1":    "NA", 
  "H1":    "H", 
  "C2":    "CA", 
  "N2":    "N2", 
  "H21":    "H", 
  "H22":    "H", 
  "N3":    "NC", 
  "C4":    "CB", 
  "C3'":    "CT", 
  "H3'":    "H1", 
  "C2'":    "CT", 
  "H2'1":    "H1", 
  "O2'":    "OH", 
  "HO'2":    "HO", 
  "O3'":    "OS", 
},
"RUN": {"H5T":    "HO",
  "O5'":    "OH",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N1":    "N*",
  "C6":    "CS",
  "H6":    "H4",
  "C5":    "CS",
  "H5":    "HA",
  "C4":    "C",
  "O4":    "O",
  "N3":    "NA",
  "H3":    "H",
  "C2":    "C",
  "O2":    "O",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OH",
  "H3T":    "HO",
},
"RU3": {  "P":    "P",
   "O1P":    "O2",
   "O2P":    "O2",
   "O5'":    "OS",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N1":    "N*",
  "C6":    "CS",
  "H6":    "H4",
  "C5":    "CS",
  "H5":    "HA",
  "C4":    "C",
  "O4":    "O",
  "N3":    "NA",
  "H3":    "H",
  "C2":    "C",
  "O2":    "O",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OH",
  "H3T":    "HO",
},
"RU": {  "P":    "P",
   "O1P":    "O2",
   "O2P":    "O2",
   "O5'":    "OS",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N1":    "N*",
  "C6":    "CS",
  "H6":    "H4",
  "C5":    "CS",
  "H5":    "HA",
  "C4":    "C",
  "O4":    "O",
  "N3":    "NA",
  "H3":    "H",
  "C2":    "C",
  "O2":    "O",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OS",
},
"RU5": {"H5T":    "HO",
  "O5'":    "OH",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N1":    "N*",
  "C6":    "CS",
  "H6":    "H4",
  "C5":    "CS",
  "H5":    "HA",
  "C4":    "C",
  "O4":    "O",
  "N3":    "NA",
  "H3":    "H",
  "C2":    "C",
  "O2":    "O",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OS",
},
"RAN": {"H5T":    "HO",
  "O5'":    "OH",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N9":    "N*",
  "C8":    "C5",
  "H8":    "H5",
  "N7":    "NB",
  "C5":    "CB",
  "C6":    "CA",
  "N6":    "N2",
  "H61":    "H",
  "H62":    "H",
  "N1":    "NC",
  "C2":    "CQ",
  "H2":    "H5",
  "N3":    "NC",
  "C4":    "CB",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OH",
  "H3T":    "HO",
},
"RA3": {  "P":    "P",
   "O1P":    "O2",
   "O2P":    "O2",
   "O5'":    "OS",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N9":    "N*",
  "C8":    "C5",
  "H8":    "H5",
  "N7":    "NB",
  "C5":    "CB",
  "C6":    "CA",
  "N6":    "N2",
  "H61":    "H",
  "H62":    "H",
  "N1":    "NC",
  "C2":    "CQ",
  "H2":    "H5",
  "N3":    "NC",
  "C4":    "CB",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OH",
  "H3T":    "HO",
},
"RA": {  "P":    "P",
   "O1P":    "O2",
   "O2P":    "O2",
   "O5'":    "OS",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N9":    "N*",
  "C8":    "C5",
  "H8":    "H5",
  "N7":    "NB",
  "C5":    "CB",
  "C6":    "CA",
  "N6":    "N2",
  "H61":    "H",
  "H62":    "H",
  "N1":    "NC",
  "C2":    "CQ",
  "H2":    "H5",
  "N3":    "NC",
  "C4":    "CB",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OS",
},
"RA5": {"H5T":    "HO",
  "O5'":    "OH",
  "C5'":    "CI",
  "H5'1":    "H1",
  "H5'2":    "H1",
  "C4'":    "CT",
  "H4'":    "H1",
  "O4'":    "OS",
  "C1'":    "CT",
  "H1'":    "H2",
  "N9":    "N*",
  "C8":    "C5",
  "H8":    "H5",
  "N7":    "NB",
  "C5":    "CB",
  "C6":    "CA",
  "N6":    "N2",
  "H61":    "H",
  "H62":    "H",
  "N1":    "NC",
  "C2":    "CQ",
  "H2":    "H5",
  "N3":    "NC",
  "C4":    "CB",
  "C3'":    "CT",
  "H3'":    "H1",
  "C2'":    "CT",
  "H2'1":    "H1",
  "O2'":    "OH",
  "HO'2":    "HO",
  "O3'":    "OS",
}
                  }


align_notat = {"H2'": "H2'1",
"HO2'":"HO'2",
"OP2": "O2P",
"OP1":"O1P",
"H5'": "H5'1",
"H5''":"H5'2",
              }

def rename_residues_amber(df):
    residue_list = df['resnum'].unique()[:-1]
    
    for i, resnum in enumerate(residue_list):
        residues = df[df['resnum']==resnum]
        
        indexs= df[df['resnum']==str(resnum)].index  
        previous_res = residue_list[i-1]
        # 5' term, first
        if int(resnum) ==1:  
            df.loc[indexs,'res'] = 'R'+residues['res']+'5'

        # 3' term, final
        elif resnum == residue_list[-1]:
            df.loc[indexs,'res'] = 'R'+residues['res']+'3'

        # 5' term, interm
        elif 'P' not in df[df['resnum']==str(resnum)]['attype'].values:
            df.loc[indexs,'res'] = 'R'+residues['res']+'5'

        # 3' term, interm
        elif 'P' not in df[df['resnum']==str(previous_res)]['attype'].values and resnum !='2':
            df.loc[indexs,'res'] = 'R'+residues['res']+'3'

        # other residues are regular
        else:
            df.loc[indexs,'res'] = 'R'+residues['res']
            
    return df

def asign_ambername(attype, residue):
        if attype in align_notat:
            amber_at = dict_amber_atoms[residue][align_notat[attype]]
        else:
            amber_at = dict_amber_atoms[residue][attype]
        return amber_at

def rename_at_list(df):
    lines_file = []

    for i, row in df.iterrows():
        if row['ATOM']=='TER':
            lines_file.append('TER')
            return lines_file
        
        # skipping H atoms
        if 'H' in row['attype']:
            continue

        spac_atnum = (7-len(row['atnum']))*' '
        amber_at = asign_ambername(row['attype'], row['res'])
        spac_attype = (4-len(amber_at))*' ' + (3-len(row['res']))*' '

        space_res = (2-len(row['chain']))*' '
        space_resnum = (4-len(row['resnum']))*' '
        
        sp_beforex = (12-len(row['x']))*' '
        sp_beforey = (8 - len(row['y']))*' '
        sp_beforez = (8 - len(row['z']))*' '
        line_spaced = row['ATOM']+spac_atnum+row['atnum']+'  '+amber_at+spac_attype+row['res']+space_res+row['chain']+space_resnum+row['resnum']+sp_beforex+row['x']+sp_beforey+row['y']+sp_beforez+row['z']+'  '+row['1']+'  '+row['0']+'           '+row['elem']+' \n'
        lines_file.append(line_spaced)
    return lines_file

def subst_atname_amber(tomod, newfile):

    with open(tomod) as f:
        file =  f.readlines()
        
    todelete = ['HEADER', 'EXPDTA', 'REMARK']
    def check_delete(string, todelete):
        for word in todelete:
            if word in string:
                return 0
        return 1
    file = [line for line in file if check_delete(line, todelete) ]
    file = [line.split() for line in file]
    df = pd.DataFrame(file, columns=['ATOM', 'atnum', 'attype', 'res','chain','resnum','x','y','z','1','0','elem'])
      
    renamedres = rename_residues_amber(df)

    newlines = rename_at_list(renamedres)

    # Saving into new file

    with open(str(newfile), "w") as f:
      f.writelines(newlines)
    return


# so I can run script directly, but code below is not ran when imported
if (__name__ == '__main__'):
    
    tomod = sys.argv[1]
    newfile = sys.argv[2]

    subst_atname_amber(tomod, newfile)
    
